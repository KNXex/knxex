searchNodes=[{"doc":"Documentation for KNXex .","ref":"KNXex.html","title":"KNXex","type":"module"},{"doc":"KNX Common External Message Interface Control Field (cEMI). The cEMI control field has the following structure and bit order: + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - + | Control Field 1 | Control Field 2 | + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + | 15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + -- -- + The control field 1 has the following structure: Bit | -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 15 | Frame Type - 0 = for extended frame | 1 = for standard frame -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 14 | Reserved | -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 13 | Repeat Flag - 0 = repeat frame on medium in case of an error ( or on receive : repeated ) | 1 = do not repeat ( or on receive : not repeated ) -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 12 | System Broadcast - 0 = system broadcast | 1 = broadcast -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 11 | Priority - 0 = system ( reserved ) | 1 = normal ( also called alarm priority ) -- -- -- + 2 = urgent ( also called high priority ) 10 | 3 = low | -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 9 | Acknowledge Request - 0 = no ACK requested | ( L_Data . req ) 1 = ACK requested -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 8 | Confirm - 0 = no error | ( L_Data . con ) - 1 = error -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - The control field 2 has the following structure: Bit | -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 7 | Destination Address Type - 0 = individual address | - 1 = group address -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 6 - 4 | Hop Count ( 0 - 7 ) -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - 3 - 0 | Extended Frame Format - 0 = standard frame -- -- -- + -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -","ref":"KNXex.CEMIControlField.html","title":"KNXex.CEMIControlField","type":"module"},{"doc":"","ref":"KNXex.CEMIControlField.html#assert_name/2","title":"KNXex.CEMIControlField.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.CEMIControlField.html#by_name/2","title":"KNXex.CEMIControlField.by_name/2","type":"function"},{"doc":"","ref":"KNXex.CEMIControlField.html#by_value/2","title":"KNXex.CEMIControlField.by_value/2","type":"function"},{"doc":"Explains the given control field. This returns an explain string. You may want to pipe the string into IO.puts/2 . Example output: Control Field 2 : Bit 0 - 3 : Extended Frame Format : 0 ( used for LTE ) Bit 4 - 6 : Hop Count : 5 Bit 7 : Destination Address Type : group Control Field 1 : Bit 8 : Confirm ( L_Data . con ) : no error Bit 9 : ACK Requested : no ACK requested Bit 10 + 11 : Priority : low Bit 12 : System Broadcast : no Bit 13 : Do - Not - Repeat / Original Flag : yes Bit 14 : -- reserved -- Bit 15 : Frame Type : standard","ref":"KNXex.CEMIControlField.html#explain/1","title":"KNXex.CEMIControlField.explain/1","type":"function"},{"doc":"Checks if the given cEMI Control Field has the ACK rqeuested bit set. Only relevant for L_Data.req frames.","ref":"KNXex.CEMIControlField.html#has_ack_requested_bit/1","title":"KNXex.CEMIControlField.has_ack_requested_bit/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the do not repeat flag bit set (do not repeat on medium error).","ref":"KNXex.CEMIControlField.html#has_do_not_repeat/1","title":"KNXex.CEMIControlField.has_do_not_repeat/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the error bit set (confirm = 1 =&gt; error). Only relevant for L_Data.con frames.","ref":"KNXex.CEMIControlField.html#has_error_bit/1","title":"KNXex.CEMIControlField.has_error_bit/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the broadcast bit set.","ref":"KNXex.CEMIControlField.html#is_broadcast/1","title":"KNXex.CEMIControlField.is_broadcast/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the destination address type bit set to group.","ref":"KNXex.CEMIControlField.html#is_destination_group/1","title":"KNXex.CEMIControlField.is_destination_group/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the destination address type bit set to individual.","ref":"KNXex.CEMIControlField.html#is_destination_individual/1","title":"KNXex.CEMIControlField.is_destination_individual/1","type":"macro"},{"doc":"Checks if the given cEMI Control Field has the extended frame bit set.","ref":"KNXex.CEMIControlField.html#is_extended_frame/1","title":"KNXex.CEMIControlField.is_extended_frame/1","type":"macro"},{"doc":"","ref":"KNXex.CEMIControlField.html#macro_assert_name/2","title":"KNXex.CEMIControlField.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.CEMIControlField.html#macro_by_name/2","title":"KNXex.CEMIControlField.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.CEMIControlField.html#macro_by_value/2","title":"KNXex.CEMIControlField.macro_by_value/2","type":"macro"},{"doc":"The KNX cEMI control field. It is a bitfield. See the module doc.","ref":"KNXex.CEMIControlField.html#t:t/0","title":"KNXex.CEMIControlField.t/0","type":"type"},{"doc":"KNX Constants.","ref":"KNXex.Constants.html","title":"KNXex.Constants","type":"module"},{"doc":"","ref":"KNXex.Constants.html#assert_name/2","title":"KNXex.Constants.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.Constants.html#by_name/2","title":"KNXex.Constants.by_name/2","type":"function"},{"doc":"","ref":"KNXex.Constants.html#by_value/2","title":"KNXex.Constants.by_value/2","type":"function"},{"doc":"","ref":"KNXex.Constants.html#macro_assert_name/2","title":"KNXex.Constants.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.Constants.html#macro_by_name/2","title":"KNXex.Constants.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.Constants.html#macro_by_value/2","title":"KNXex.Constants.macro_by_value/2","type":"macro"},{"doc":"KNX Data Information Block (DIB). Implements parsing/decoding of DIBs.","ref":"KNXex.DIB.html","title":"KNXex.DIB","type":"module"},{"doc":"Encodes a single DIB into a binary.","ref":"KNXex.DIB.html#encode/1","title":"KNXex.DIB.encode/1","type":"function"},{"doc":"Parses the DIBs from the given binary DIB data.","ref":"KNXex.DIB.html#parse/1","title":"KNXex.DIB.parse/1","type":"function"},{"doc":"Data Information Block. Always a two-item tuple, with the first item being the DIB identifier and the second item being the DIB data.","ref":"KNXex.DIB.html#t:dib/0","title":"KNXex.DIB.dib/0","type":"type"},{"doc":"Service Family name.","ref":"KNXex.DIB.html#t:service_family_name/0","title":"KNXex.DIB.service_family_name/0","type":"type"},{"doc":"KNXnet/IP Data Information Block &quot;Device Info&quot;.","ref":"KNXex.DIB.DeviceInfo.html","title":"KNXex.DIB.DeviceInfo","type":"module"},{"doc":"KNX medium type. Twisted Pair, IP, Radio Frequency, or Powerline.","ref":"KNXex.DIB.DeviceInfo.html#t:medium/0","title":"KNXex.DIB.DeviceInfo.medium/0","type":"type"},{"doc":"Represents a KNX Device Info. The Device Status bitfield only contains the programming mode on bit 0.","ref":"KNXex.DIB.DeviceInfo.html#t:t/0","title":"KNXex.DIB.DeviceInfo.t/0","type":"type"},{"doc":"KNXnet/IP Data Information Block &quot;IP Config&quot; (and &quot;Current IP Config&quot;).","ref":"KNXex.DIB.IPConfig.html","title":"KNXex.DIB.IPConfig","type":"module"},{"doc":"Converts a four item tuple IP address to a integer IP address (integer 32bit).","ref":"KNXex.DIB.IPConfig.html#inet_to_integer/1","title":"KNXex.DIB.IPConfig.inet_to_integer/1","type":"function"},{"doc":"Converts a integer IP address (integer 32bit) to a four item tuple.","ref":"KNXex.DIB.IPConfig.html#integer_to_inet/1","title":"KNXex.DIB.IPConfig.integer_to_inet/1","type":"function"},{"doc":"","ref":"KNXex.DIB.IPConfig.html#t:t/0","title":"KNXex.DIB.IPConfig.t/0","type":"type"},{"doc":"KNX data point types (DPT). This module only contains a subset of all DPTs. KNX datapoints all have a type as well as a value. The type must be known in order to encode and decode a datapoint. The datapoint type is a string, consisting of a main number and a subnumber seperated by a dot, e.g. &quot;1.001&quot; . The type carries information as to the format, encoding, range and unit of the datapoint. A full list of datapoint types can be seen in the KNX specification (document 3/7/2). Most datapoint types are mapped directly to a single-valued Elixir data type, but complex KNX values are mapped to tuples. The below table lists these mappings: Datapoint Type Elixir type Encoded Decoded 1.* boolean() &lt;&lt;1::6&gt;&gt; true 2.* {c, v}, all elements are integer() &lt;&lt;3::6&gt;&gt; {1, 1} 3.* {c, stepcode}, all elements are integer() &lt;&lt;3&gt;&gt; {0, 3} 4.* binary() &lt;&lt;&quot;T&quot;&gt;&gt; &quot;T&quot; 5.* integer() &lt;&lt;123&gt;&gt; 123 6.* (except 6.020) integer() &lt;&lt;123&gt;&gt; 123 6.020 {a, b, c, d, e, f}, all elements are integer() &lt;&lt;180&gt;&gt; {1, 0, 1, 1, 0, 4} 7.* integer() &lt;&lt;3421::16&gt;&gt; 3421 8.* integer() &lt;&lt;3421::16&gt;&gt; 3421 9.* float() &lt;&lt;13, 220&gt;&gt; 30.0 10.* {day, hour, minutes, seconds}, all elements are integer() &lt;204, 43, 12&gt;&gt; {6, 12, 43, 12} 11.* {day, month, year}, all elements are integer() &lt;&lt;12, 5, 19&gt;&gt; {12, 5, 2019} 12.* integer() &lt;&lt;203424034::32&gt;&gt; 203424034 13.* integer() &lt;&lt;203424034::32&gt;&gt; 203424034 14.* float() &lt;&lt;1174713696::32&gt;&gt; 8493.34375 15.* {d6, d5, d4, d3, d2, d1, e, p, d, c, index}, all elements are integer() &lt;&lt;32, 118, 57, 158&gt;&gt; {2, 0, 7, 6, 3, 9, 1, 0, 0, 1, 14} 16.* binary() &lt;&lt;79, 75, 0, 0, ...&gt;&gt; OK 17.* integer() &lt;&lt;61&gt;&gt; 61 18.* {c, scene_number}, all elements are integer() &lt;&lt;152&gt;&gt; {1, 24} 19.* {{fault, dst, clock_quality}, NaiveDateTime.t() | :invalid_date_and_time}, first tuple element = all elements boolean() &lt;&lt;122, 5, 7, ...&gt;&gt; {{false, true, false}, ~N[2022-05-07 17:46:35]} 20.* integer() &lt;&lt;13&gt;&gt; 13 21.* {b0, b1, b2, b3, b4, b5, b7}, all elements are boolean() &lt;&lt;13&gt;&gt; {true, false, true, true, false, false, false, false} 22.* {b0, b1, b2, b3, b4, b5, b7, ..., b15}, all elements are boolean() &lt;&lt;13, 15&gt;&gt; {true, true, true, true, false, ..., false} 23.* {a, b}, all elements are integer() &lt;&lt;3::6&gt;&gt; {1, 1} 24.* String.t() &lt;&lt;75, 78, ..., 0&gt;&gt; KNX is OK 25.* integer() &lt;&lt;58&gt;&gt; 58 26.* {active, scene_number}, all elements are integer() &lt;&lt;34&gt;&gt; {0, 34} 27.* List of {onoff_state, valid} à 16 elements, all tuple elements are integer() &lt;&lt;15, 240, 252, 15&gt;&gt; [{1, 0}, ..., {0, 1}, .. {1, 1}, ...] 28.* String.t() &lt;&lt;75, 78, ..., 0&gt;&gt; KNX is OK 29.* integer() &lt;&lt;255, 255, ...&gt;&gt; -92363274911746 219.* {lognumber, priority, app_area, error_class, attributes, alarmstatus_attributes}, all elements are integer() &lt;&lt;128, 2, 1, 3, 0, 3&gt;&gt; {128, 2, 1, 3, 0, 3}","ref":"KNXex.DPT.html","title":"KNXex.DPT","type":"module"},{"doc":"","ref":"KNXex.DPT.html#assert_name/2","title":"KNXex.DPT.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.DPT.html#by_name/2","title":"KNXex.DPT.by_name/2","type":"function"},{"doc":"","ref":"KNXex.DPT.html#by_value/2","title":"KNXex.DPT.by_value/2","type":"function"},{"doc":"Decodes the value according to the DPT.","ref":"KNXex.DPT.html#decode/2","title":"KNXex.DPT.decode/2","type":"function"},{"doc":"Encodes the value according to the DPT.","ref":"KNXex.DPT.html#encode/2","title":"KNXex.DPT.encode/2","type":"function"},{"doc":"Get all defined DPTs. This will return a list of {type, name, value} , i.e. [{:dpt_1bit, &quot;DPT_Switch&quot;, &quot;1.001&quot;}] .","ref":"KNXex.DPT.html#get_dpts/0","title":"KNXex.DPT.get_dpts/0","type":"function"},{"doc":"","ref":"KNXex.DPT.html#macro_assert_name/2","title":"KNXex.DPT.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.DPT.html#macro_by_name/2","title":"KNXex.DPT.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.DPT.html#macro_by_value/2","title":"KNXex.DPT.macro_by_value/2","type":"macro"},{"doc":"KNX ETS project.","ref":"KNXex.EtsProject.html","title":"KNXex.EtsProject","type":"module"},{"doc":"Returns a new empty ETS project struct.","ref":"KNXex.EtsProject.html#new/2","title":"KNXex.EtsProject.new/2","type":"function"},{"doc":"KNX completion status.","ref":"KNXex.EtsProject.html#t:completion_status/0","title":"KNXex.EtsProject.completion_status/0","type":"type"},{"doc":"KNX medium type. Twisted Pair, IP, Radio Frequency, or Powerline.","ref":"KNXex.EtsProject.html#t:medium/0","title":"KNXex.EtsProject.medium/0","type":"type"},{"doc":"Represents a KNX ETS project. Locations is currently not supported and ignored. group_addresses is keyed by the ID or the group address in x/y/z notation, depending on the parser setting :group_addresses_key .","ref":"KNXex.EtsProject.html#t:t/0","title":"KNXex.EtsProject.t/0","type":"type"},{"doc":"KNX group address information. Includes information about the group address from the ETS project.","ref":"KNXex.EtsProject.GroupAddressInfo.html","title":"KNXex.EtsProject.GroupAddressInfo","type":"module"},{"doc":"Represents a KNX group address.","ref":"KNXex.EtsProject.GroupAddressInfo.html#t:t/0","title":"KNXex.EtsProject.GroupAddressInfo.t/0","type":"type"},{"doc":"KNX manufacturer application program.","ref":"KNXex.EtsProject.Manufacturer.ApplicationProgram.html","title":"KNXex.EtsProject.Manufacturer.ApplicationProgram","type":"module"},{"doc":"Represents a KNX manufacturer application program.","ref":"KNXex.EtsProject.Manufacturer.ApplicationProgram.html#t:t/0","title":"KNXex.EtsProject.Manufacturer.ApplicationProgram.t/0","type":"type"},{"doc":"KNX manufacturer hardware.","ref":"KNXex.EtsProject.Manufacturer.Hardware.html","title":"KNXex.EtsProject.Manufacturer.Hardware","type":"module"},{"doc":"Represents KNX manufacturer hardware.","ref":"KNXex.EtsProject.Manufacturer.Hardware.html#t:t/0","title":"KNXex.EtsProject.Manufacturer.Hardware.t/0","type":"type"},{"doc":"KNX manufacturer Hardware-to-Program mapping.","ref":"KNXex.EtsProject.Manufacturer.Hardware.Hardware2Program.html","title":"KNXex.EtsProject.Manufacturer.Hardware.Hardware2Program","type":"module"},{"doc":"Represents a KNX manufacturer Hardware-to-Program mapping.","ref":"KNXex.EtsProject.Manufacturer.Hardware.Hardware2Program.html#t:t/0","title":"KNXex.EtsProject.Manufacturer.Hardware.Hardware2Program.t/0","type":"type"},{"doc":"KNX manufacturer hardware product.","ref":"KNXex.EtsProject.Manufacturer.Hardware.Product.html","title":"KNXex.EtsProject.Manufacturer.Hardware.Product","type":"module"},{"doc":"Represents a KNX manufacturer hardware product.","ref":"KNXex.EtsProject.Manufacturer.Hardware.Product.html#t:t/0","title":"KNXex.EtsProject.Manufacturer.Hardware.Product.t/0","type":"type"},{"doc":"KNX topology area.","ref":"KNXex.EtsProject.Topology.Area.html","title":"KNXex.EtsProject.Topology.Area","type":"module"},{"doc":"Represents a KNX topology area.","ref":"KNXex.EtsProject.Topology.Area.html#t:t/0","title":"KNXex.EtsProject.Topology.Area.t/0","type":"type"},{"doc":"KNX topology device.","ref":"KNXex.EtsProject.Topology.Device.html","title":"KNXex.EtsProject.Topology.Device","type":"module"},{"doc":"Represents a KNX topology device.","ref":"KNXex.EtsProject.Topology.Device.html#t:t/0","title":"KNXex.EtsProject.Topology.Device.t/0","type":"type"},{"doc":"KNX topology device communication object.","ref":"KNXex.EtsProject.Topology.Device.ComObject.html","title":"KNXex.EtsProject.Topology.Device.ComObject","type":"module"},{"doc":"Represents a KNX topology device communication object. The object size is in bits.","ref":"KNXex.EtsProject.Topology.Device.ComObject.html#t:t/0","title":"KNXex.EtsProject.Topology.Device.ComObject.t/0","type":"type"},{"doc":"KNX device status.","ref":"KNXex.EtsProject.Topology.Device.Status.html","title":"KNXex.EtsProject.Topology.Device.Status","type":"module"},{"doc":"Represents a KNX device status.","ref":"KNXex.EtsProject.Topology.Device.Status.html#t:t/0","title":"KNXex.EtsProject.Topology.Device.Status.t/0","type":"type"},{"doc":"KNX topology line.","ref":"KNXex.EtsProject.Topology.Line.html","title":"KNXex.EtsProject.Topology.Line","type":"module"},{"doc":"Represents a KNX topology line.","ref":"KNXex.EtsProject.Topology.Line.html#t:t/0","title":"KNXex.EtsProject.Topology.Line.t/0","type":"type"},{"doc":"KNX Frame. This contains a bunch of low level information from the frame.","ref":"KNXex.Frame.html","title":"KNXex.Frame","type":"module"},{"doc":"KNX request types.","ref":"KNXex.Frame.html#t:request_type/0","title":"KNXex.Frame.request_type/0","type":"type"},{"doc":"KNX frame. The :body key might be a struct or the binary data, if the frame was not parsed.","ref":"KNXex.Frame.html#t:t/0","title":"KNXex.Frame.t/0","type":"type"},{"doc":"This module contains all the binary matching logic for the KNX frames (inlined through macros from the actual frame modules). Frames that are inlined into this module (using use ), have to implement the decode_frame/3 function with binary matching in the header.","ref":"KNXex.FrameDecoder.html","title":"KNXex.FrameDecoder","type":"module"},{"doc":"Decodes a KNX frame from a binary string. :ignore will be returned as a default fallback, if no frame decoder matches.","ref":"KNXex.FrameDecoder.html#decode_frame/3","title":"KNXex.FrameDecoder.decode_frame/3","type":"function"},{"doc":"KNX Description Request Frame. This frame does have a frame encoder implementation.","ref":"KNXex.Frames.DescriptionRequestFrame.html","title":"KNXex.Frames.DescriptionRequestFrame","type":"module"},{"doc":"Represents a KNX Description Request frame.","ref":"KNXex.Frames.DescriptionRequestFrame.html#t:t/0","title":"KNXex.Frames.DescriptionRequestFrame.t/0","type":"type"},{"doc":"KNX Description Response Frame. This frame does have a frame encoder implementation.","ref":"KNXex.Frames.DescriptionResponseFrame.html","title":"KNXex.Frames.DescriptionResponseFrame","type":"module"},{"doc":"Represents a KNX Description Response frame.","ref":"KNXex.Frames.DescriptionResponseFrame.html#t:t/0","title":"KNXex.Frames.DescriptionResponseFrame.t/0","type":"type"},{"doc":"Frame Encoder protocol for the Multicast Server.","ref":"KNXex.Frames.FrameEncoder.html","title":"KNXex.Frames.FrameEncoder","type":"protocol"},{"doc":"Encodes the structure into a bitstring for the request payload.","ref":"KNXex.Frames.FrameEncoder.html#encode/2","title":"KNXex.Frames.FrameEncoder.encode/2","type":"function"},{"doc":"Returns the correct request type for the given datatype.","ref":"KNXex.Frames.FrameEncoder.html#get_request_type/1","title":"KNXex.Frames.FrameEncoder.get_request_type/1","type":"function"},{"doc":"","ref":"KNXex.Frames.FrameEncoder.html#t:t/0","title":"KNXex.Frames.FrameEncoder.t/0","type":"type"},{"doc":"KNX Routing Busy Frame.","ref":"KNXex.Frames.RoutingBusyFrame.html","title":"KNXex.Frames.RoutingBusyFrame","type":"module"},{"doc":"Represents a KNX Routing Busy frame.","ref":"KNXex.Frames.RoutingBusyFrame.html#t:t/0","title":"KNXex.Frames.RoutingBusyFrame.t/0","type":"type"},{"doc":"KNX Routing Indication Frame. This frame does have a frame encoder implementation. The payload has the following type for a specific message code: :data_request or :data_indicator -&gt; KNXex.Frames.RoutingIndicationFrame.Data Any other -&gt; KNXex.Frames.RoutingIndicationFrame.Raw","ref":"KNXex.Frames.RoutingIndicationFrame.html","title":"KNXex.Frames.RoutingIndicationFrame","type":"module"},{"doc":"KNX message codes.","ref":"KNXex.Frames.RoutingIndicationFrame.html#t:message_code/0","title":"KNXex.Frames.RoutingIndicationFrame.message_code/0","type":"type"},{"doc":"Represents a KNX Routing Indication frame.","ref":"KNXex.Frames.RoutingIndicationFrame.html#t:t/0","title":"KNXex.Frames.RoutingIndicationFrame.t/0","type":"type"},{"doc":"This module contains the data of Routing Indication Frames, that have the message code data_indicator or data_request . These type of frames are used to send GroupValueRead, GroupValueRespond and GroupValueWrite requests, among other telegrams.","ref":"KNXex.Frames.RoutingIndicationFrame.Data.html","title":"KNXex.Frames.RoutingIndicationFrame.Data","type":"module"},{"doc":"KNX Application Layer Protocol Control Information (APCI). The APCI defines the service. See also https://support.knx.org/hc/en-us/articles/115003188529-Payload .","ref":"KNXex.Frames.RoutingIndicationFrame.Data.html#t:apci/0","title":"KNXex.Frames.RoutingIndicationFrame.Data.apci/0","type":"type"},{"doc":"Represents a data service frame.","ref":"KNXex.Frames.RoutingIndicationFrame.Data.html#t:t/0","title":"KNXex.Frames.RoutingIndicationFrame.Data.t/0","type":"type"},{"doc":"This module contains the raw data of Routing Indication Frames. That is, this struct gets used, when the message code of any other RoutingIndicationFrame does not match.","ref":"KNXex.Frames.RoutingIndicationFrame.Raw.html","title":"KNXex.Frames.RoutingIndicationFrame.Raw","type":"module"},{"doc":"Represents a raw service frame.","ref":"KNXex.Frames.RoutingIndicationFrame.Raw.html#t:t/0","title":"KNXex.Frames.RoutingIndicationFrame.Raw.t/0","type":"type"},{"doc":"KNX Routing Lost Message Frame.","ref":"KNXex.Frames.RoutingLostMessageFrame.html","title":"KNXex.Frames.RoutingLostMessageFrame","type":"module"},{"doc":"Represents a KNX Routing Lost Message frame.","ref":"KNXex.Frames.RoutingLostMessageFrame.html#t:t/0","title":"KNXex.Frames.RoutingLostMessageFrame.t/0","type":"type"},{"doc":"KNX Search Request Frame. This frame does have a frame encoder implementation.","ref":"KNXex.Frames.SearchRequestFrame.html","title":"KNXex.Frames.SearchRequestFrame","type":"module"},{"doc":"Represents a KNX Search Request frame.","ref":"KNXex.Frames.SearchRequestFrame.html#t:t/0","title":"KNXex.Frames.SearchRequestFrame.t/0","type":"type"},{"doc":"KNX Search Response Frame. This frame does have a frame encoder implementation.","ref":"KNXex.Frames.SearchResponseFrame.html","title":"KNXex.Frames.SearchResponseFrame","type":"module"},{"doc":"Represents a KNX Search Response frame.","ref":"KNXex.Frames.SearchResponseFrame.html#t:t/0","title":"KNXex.Frames.SearchResponseFrame.t/0","type":"type"},{"doc":"KNX telegrams GenStage producer and broadcast dispatcher.","ref":"KNXex.GenStageProducer.html","title":"KNXex.GenStageProducer","type":"module"},{"doc":"Starts the GenStage producer and broadcast dispatcher.","ref":"KNXex.GenStageProducer.html#start_link/1","title":"KNXex.GenStageProducer.start_link/1","type":"function"},{"doc":"Subscribes to the given KNX interface and thus receives KNX telegrams from it. The received KNX telegrams are forwarded as GenStage events, in the form of {:knx, KNXex.Telegram.t()} . This producer can also subscribe to GroupAddressServer , which will give you better information about the group address, but less information about the source. However said server uses a different struct and does not emit telegrams. You will receive {:knx_group, GroupAddressData.t()} events in that case.","ref":"KNXex.GenStageProducer.html#subscribe_to/3","title":"KNXex.GenStageProducer.subscribe_to/3","type":"function"},{"doc":"Unsubscribes from the given KNX interface. KNX telegrams cannot be received from it anymore.","ref":"KNXex.GenStageProducer.html#unsubscribe_from/3","title":"KNXex.GenStageProducer.unsubscribe_from/3","type":"function"},{"doc":"KNX group address.","ref":"KNXex.GroupAddress.html","title":"KNXex.GroupAddress","type":"module"},{"doc":"Parses the raw group address (16bit integer) into a GroupAddress struct.","ref":"KNXex.GroupAddress.html#from_raw_address/1","title":"KNXex.GroupAddress.from_raw_address/1","type":"function"},{"doc":"Parses a group address from a string into a GroupAddress struct.","ref":"KNXex.GroupAddress.html#from_string/1","title":"KNXex.GroupAddress.from_string/1","type":"function"},{"doc":"Creates a GroupAddress struct from the given main , middle and sub group addresses parts.","ref":"KNXex.GroupAddress.html#make/3","title":"KNXex.GroupAddress.make/3","type":"function"},{"doc":"Returns the raw group address (16bit integer).","ref":"KNXex.GroupAddress.html#to_raw_address/1","title":"KNXex.GroupAddress.to_raw_address/1","type":"function"},{"doc":"Returns the group address as a string.","ref":"KNXex.GroupAddress.html#to_string/1","title":"KNXex.GroupAddress.to_string/1","type":"function"},{"doc":"Represents a KNX group address.","ref":"KNXex.GroupAddress.html#t:t/0","title":"KNXex.GroupAddress.t/0","type":"type"},{"doc":"The KNX Group Address Server listens for KNX group telegrams and stores their values. The group addresses must be known by this server and the KNX client, in order to be able to decode and encode the value. Unknown group addresses by this server are ignored, even if received and decoded by the KNX client. Group addresses without a type found in the :ets_project are filtered out. In other cases, where group addresses is explicitely given, an exception is raised. The server can read all relevant group addresses from the KNX bus on startup to hydrate the values. To avoid reading group addresses on startup from the KNX bus, an alternative approach to hydrate the group addresses state can be provided by the hydratation_state option. During hydration, the server does not answer any requests. This server uses one ETS table to store the data. Multiple instances of this server should be carefully considered, as the ETS table is shared. Each function takes an opts keyword list, which can have an optional :name option, which is then used to call the MulticastClient identified by the :name (a PID or registered name), and an optional :timeout option (defaults to 5000).","ref":"KNXex.GroupAddressServer.html","title":"KNXex.GroupAddressServer","type":"module"},{"doc":"Adds the given group address with the datapoint type (DPT) to the group address list. Unknown group addresses can not be used to send or receive telegrams. The DPT is in the form of &quot;x.yyy&quot; where x and y are numbers, i.e. 1.001 . The following options are additionally supported: hydrate: boolean() - Optional. Specifies whether the group address should be read to hydrate the value (defaults to false ).","ref":"KNXex.GroupAddressServer.html#add/3","title":"KNXex.GroupAddressServer.add/3","type":"function"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"KNXex.GroupAddressServer.html#child_spec/1","title":"KNXex.GroupAddressServer.child_spec/1","type":"function"},{"doc":"Creates the ETS table. The current process will be the owner of the table. The table should be created before starting the server, if multiple are started. This would prevent losing the whole table if one server crashes. The ETS table will be automatically created in the server process, if it does not exist, however. If the ETS table already exists, the table identifier will be returned. The owner is not modified.","ref":"KNXex.GroupAddressServer.html#create_ets_table/0","title":"KNXex.GroupAddressServer.create_ets_table/0","type":"function"},{"doc":"This is a helper function that takes an ETS project struct, optionally the path to the ETS project file, and whether group addresses which have an unknown read flag should be read from the KNX bus. The ETS project file MUST exist, as it must be read from disk to read the manufacturer data. As output you will receive a list of group addresses that can be read from the KNX bus, optionally with group addresses that may be readable. The following optional options can be given: allow_nil: boolean() - Whether group addresses that have an unknown read flag should be read from the KNX bus (defaults to true ). manufacturer_map: map() - A map from KNXex.ProjectParser.parse_manufacturers/2 , if it has already been done before. This helps not having to parse the ETS project file again. If not given, it will be parsed from the ETS project file. path: String.t() - The path to the ETS project file. If not given, the path from the ETS project struct is used. All other given elements in opts are passed to KNXex.ProjectParser.parse_manufacturers/2 .","ref":"KNXex.GroupAddressServer.html#filter_gpa_hydration_by_read_flag/2","title":"KNXex.GroupAddressServer.filter_gpa_hydration_by_read_flag/2","type":"function"},{"doc":"Gets all group addresses from the ETS table.","ref":"KNXex.GroupAddressServer.html#get_group_addresses/0","title":"KNXex.GroupAddressServer.get_group_addresses/0","type":"function"},{"doc":"Reads the group address from the ETS table. If specified, the value will be read from the KNX bus, if the value is nil . The function can also be instructed to read the value from the KNX bus, regardless whether the value is available or not. The following options are additionally supported: force_value_read: boolean() - Optional. Specifies whether the group address must be read from the KNX bus before returning it (defaults to false ). read_value_on_nil: boolean() - Optional. Specifies whether the group address is read from the KNX bus before returning, if the value is nil (defaults to false ).","ref":"KNXex.GroupAddressServer.html#read/2","title":"KNXex.GroupAddressServer.read/2","type":"function"},{"doc":"Removes the given group address from the group address list.","ref":"KNXex.GroupAddressServer.html#remove/1","title":"KNXex.GroupAddressServer.remove/1","type":"function"},{"doc":"Starts a new Group Address Server. The group addresses with their name and type is read from the ETS project file (.knxproj export). The following options are available (some are required): ets_project: KNXex.EtsProject.t() | path :: binary() - Required. The ETS project to use, or the path to the ETS project file. hydrate_on_start: boolean() | [address :: binary()] - Optional. Whether to hydrate the group addresses state on startup, by reading the group addresses from the KNX bus. If true , all group addresses are read. If a list of group addresses is given (in x/y/z format), only those are read. hydration_state: [hydration_state_item()] - Optional. The hydration state to use when hydrating the group addresses state on startup. If not given and hydrate_on_start is given, the hydration state is read from the KNX bus. hydration_timeout: pos_integer() - Optional. The timeout used when hydrating the state from the KNX bus (defaults to 5000 ms). knx_interface: module() | {module(), atom() | pid()} - Required. The KNX interface to use. The module name or a tuple of module name and PID/registered name. The only supported KNX interface modules are MulticastClient and TunnelClient currently.","ref":"KNXex.GroupAddressServer.html#start_link/1","title":"KNXex.GroupAddressServer.start_link/1","type":"function"},{"doc":"Sets the subscriber to the given PID. The PID is not checked for aliveness. Only a single subscriber is supported. This function is used with the GenStageProducer .","ref":"KNXex.GroupAddressServer.html#subscribe/2","title":"KNXex.GroupAddressServer.subscribe/2","type":"function"},{"doc":"Converts the current ETS table state into an usable hydration state. Group addresses without a value are skipped.","ref":"KNXex.GroupAddressServer.html#to_hydration_state/0","title":"KNXex.GroupAddressServer.to_hydration_state/0","type":"function"},{"doc":"Unsets the subscriber. The first argument is ignored and only for compatibility. This function is used with the GenStageProducer .","ref":"KNXex.GroupAddressServer.html#unsubscribe/2","title":"KNXex.GroupAddressServer.unsubscribe/2","type":"function"},{"doc":"Waits for the startup sequence to complete. This will block indefinitely until the server replies. This is useful during hydration, to wait until the hydration is completed and available to answer requests.","ref":"KNXex.GroupAddressServer.html#wait_for_startup/1","title":"KNXex.GroupAddressServer.wait_for_startup/1","type":"function"},{"doc":"Writes the group address. The value is written to the KNX bus and then stored in the ETS table.","ref":"KNXex.GroupAddressServer.html#write/3","title":"KNXex.GroupAddressServer.write/3","type":"function"},{"doc":"","ref":"KNXex.GroupAddressServer.html#t:hydration_state_item/0","title":"KNXex.GroupAddressServer.hydration_state_item/0","type":"type"},{"doc":"The KNX Group Address server's group address data structure.","ref":"KNXex.GroupAddressServer.GroupAddressData.html","title":"KNXex.GroupAddressServer.GroupAddressData","type":"module"},{"doc":"Represents the KNX group address, that is used in this server. In addition to KNXex.GroupAddress.t() , the name, last update time and value are stored. If the value is nil , the value is not known (has not been hydrated or received from the KNX bus yet). Type is a tuple of name and type, i.e. {&quot;DPT_Switch&quot;, &quot;1.001&quot;} .","ref":"KNXex.GroupAddressServer.GroupAddressData.html#t:t/0","title":"KNXex.GroupAddressServer.GroupAddressData.t/0","type":"type"},{"doc":"KNX individual address (also known as physical address).","ref":"KNXex.IndividualAddress.html","title":"KNXex.IndividualAddress","type":"module"},{"doc":"Parses the raw individual address (16bit integer) into a IndividualAddress struct.","ref":"KNXex.IndividualAddress.html#from_raw_address/1","title":"KNXex.IndividualAddress.from_raw_address/1","type":"function"},{"doc":"Parses a individual address from a string into a IndividualAddress struct.","ref":"KNXex.IndividualAddress.html#from_string/1","title":"KNXex.IndividualAddress.from_string/1","type":"function"},{"doc":"Creates a IndividualAddress struct from the given area , line and device individual addresses parts.","ref":"KNXex.IndividualAddress.html#make/3","title":"KNXex.IndividualAddress.make/3","type":"function"},{"doc":"Returns the raw individual address (16bit integer).","ref":"KNXex.IndividualAddress.html#to_raw_address/1","title":"KNXex.IndividualAddress.to_raw_address/1","type":"function"},{"doc":"Returns the individual address as a string.","ref":"KNXex.IndividualAddress.html#to_string/1","title":"KNXex.IndividualAddress.to_string/1","type":"function"},{"doc":"Represents a KNX individual address.","ref":"KNXex.IndividualAddress.html#t:t/0","title":"KNXex.IndividualAddress.t/0","type":"type"},{"doc":"KNXnet/IP Multicast Client. The KNX Multicast Client uses multicast to send and receive KNX telegrams (or any other KNX frame). The Client adds its membership to the multicast group and listens for incoming telegrams. Outgoing KNX frames are sent using multicast, too. The KNX/IP router must be correctly configured to forward the KNX frame to their KNX/TP connection. You may have multiple for each area or line, so the correct KNX/IP router, that should forward the KNX frame, must have the filter table correctly configured. Each function takes an opts keyword list, which can have an optional :name option, which is then used to call the MulticastClient identified by the :name (a PID or registered name), and an optional :timeout option (defaults to 5000).","ref":"KNXex.MulticastClient.html","title":"KNXex.MulticastClient","type":"module"},{"doc":"Adds the given group address with the datapoint type (DPT) to the group address list. Unknown group addresses can not be used to send or receive telegrams. The DPT is in the form of &quot;x.yyy&quot; where x and y are numbers, i.e. 1.001 .","ref":"KNXex.MulticastClient.html#add_group_address/3","title":"KNXex.MulticastClient.add_group_address/3","type":"function"},{"doc":"Returns a specification to start this module under a supervisor. See Supervisor .","ref":"KNXex.MulticastClient.html#child_spec/1","title":"KNXex.MulticastClient.child_spec/1","type":"function"},{"doc":"Gets all group addresses from the state.","ref":"KNXex.MulticastClient.html#get_group_addresses/1","title":"KNXex.MulticastClient.get_group_addresses/1","type":"function"},{"doc":"Sends a GroupValueRead to group_address . Waits up to timeout for the response. Utilizes a Task to subscribe temporarily to events.","ref":"KNXex.MulticastClient.html#read_group_address/2","title":"KNXex.MulticastClient.read_group_address/2","type":"function"},{"doc":"Removes the given group address from the group address list.","ref":"KNXex.MulticastClient.html#remove_group_address/2","title":"KNXex.MulticastClient.remove_group_address/2","type":"function"},{"doc":"Sends a raw frame. The frame body must be binary or have a FrameEncoder implementation. If the frame body is a frame, the request_type can be set to :auto and it will be derived from the FrameEncoder implementation.","ref":"KNXex.MulticastClient.html#send_frame/2","title":"KNXex.MulticastClient.send_frame/2","type":"function"},{"doc":"Starts the KNXnet/IP Multicast Client. The following options are available (some are required): allow_unknown_gpa: boolean() - Optional. Determines whether unknown Group Addresses are allowed (not ignored when received, defaults to false ). This will also mean that you receive the raw undecoded value and you need to provide the raw encoded value when sending. frame_callback: (KNXex.Frame.t(), :handled | unhandled) -&gt; any() - Optional. A callback module can be specified, that will be called for all frames which are not explicitely handled by this server module. Two arity: (KNXex.Frame.t(), :handled | :unhandled) - :handled for frames handled by this server module. group_addresses: map() - Required. Group addresses map, where the key is the group address in x/y/z notation and the value is the DPT (datapoint type) - both being String.t() . The group address and its DPT is required to determine how to encode and decode received values. local_ip: :inet.ip4_address() - Optional. The local IP address to use. If nil, the local IP address will be discovered. multicast_ip: :inet.ip4_address() - Optional. The multicast IP address to use. If nil, it will default to 224.0.23.12 . source_address: KNXex.IndividualAddress.t() - Required. The KNX individual address that will be used as source address for all non-raw frames. The source address is required, as the KNX/IP router does not fill it in, if the source is 0.0.0 (it is transmitted as-is to the KNX bus). All other given options are passed to the GenServer module (i.e. :name can be given to override the process name to register).","ref":"KNXex.MulticastClient.html#start_link/1","title":"KNXex.MulticastClient.start_link/1","type":"function"},{"doc":"Subscribes to telegram notifications. The subscriber will receive messages in the form {:knx, KNXex.Telegram.t()} .","ref":"KNXex.MulticastClient.html#subscribe/2","title":"KNXex.MulticastClient.subscribe/2","type":"function"},{"doc":"Unsubscribes from telegram notifications.","ref":"KNXex.MulticastClient.html#unsubscribe/2","title":"KNXex.MulticastClient.unsubscribe/2","type":"function"},{"doc":"Encodes value according to the DPT of the group_address , and sends it in a GroupValueWrite to group_address . The returned reference is currently without any meaning to the user.","ref":"KNXex.MulticastClient.html#write_group_address/3","title":"KNXex.MulticastClient.write_group_address/3","type":"function"},{"doc":"KNXnet/IP Parameter Object &quot;Device Capabilities&quot;.","ref":"KNXex.PID.DeviceCapabilities.html","title":"KNXex.PID.DeviceCapabilities","type":"module"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#assert_name/2","title":"KNXex.PID.DeviceCapabilities.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#by_name/2","title":"KNXex.PID.DeviceCapabilities.by_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#by_value/2","title":"KNXex.PID.DeviceCapabilities.by_value/2","type":"function"},{"doc":"Checks if the given device capabilities has the device management capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_device_management/1","title":"KNXex.PID.DeviceCapabilities.has_device_management/1","type":"macro"},{"doc":"Checks if the given device capabilities has the object server capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_object_server/1","title":"KNXex.PID.DeviceCapabilities.has_object_server/1","type":"macro"},{"doc":"Checks if the given device capabilities has the remote configuration and diagnosis capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_remote_conf_and_diag/1","title":"KNXex.PID.DeviceCapabilities.has_remote_conf_and_diag/1","type":"macro"},{"doc":"Checks if the given device capabilities has the remote logging capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_remote_logging/1","title":"KNXex.PID.DeviceCapabilities.has_remote_logging/1","type":"macro"},{"doc":"Checks if the given device capabilities has the routing capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_routing/1","title":"KNXex.PID.DeviceCapabilities.has_routing/1","type":"macro"},{"doc":"Checks if the given device capabilities has the tunneling capability bit set.","ref":"KNXex.PID.DeviceCapabilities.html#has_tunneling/1","title":"KNXex.PID.DeviceCapabilities.has_tunneling/1","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#macro_assert_name/2","title":"KNXex.PID.DeviceCapabilities.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#macro_by_name/2","title":"KNXex.PID.DeviceCapabilities.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceCapabilities.html#macro_by_value/2","title":"KNXex.PID.DeviceCapabilities.macro_by_value/2","type":"macro"},{"doc":"KNXnet/IP Parameter Object &quot;Device State&quot;.","ref":"KNXex.PID.DeviceState.html","title":"KNXex.PID.DeviceState","type":"module"},{"doc":"","ref":"KNXex.PID.DeviceState.html#assert_name/2","title":"KNXex.PID.DeviceState.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.DeviceState.html#by_name/2","title":"KNXex.PID.DeviceState.by_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.DeviceState.html#by_value/2","title":"KNXex.PID.DeviceState.by_value/2","type":"function"},{"doc":"Checks if the given device state has the IP fault bit set.","ref":"KNXex.PID.DeviceState.html#is_ip_fault/1","title":"KNXex.PID.DeviceState.is_ip_fault/1","type":"macro"},{"doc":"Checks if the given device state has the KNX fault bit set.","ref":"KNXex.PID.DeviceState.html#is_knx_fault/1","title":"KNXex.PID.DeviceState.is_knx_fault/1","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceState.html#macro_assert_name/2","title":"KNXex.PID.DeviceState.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceState.html#macro_by_name/2","title":"KNXex.PID.DeviceState.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.DeviceState.html#macro_by_value/2","title":"KNXex.PID.DeviceState.macro_by_value/2","type":"macro"},{"doc":"KNXnet/IP Parameter Object &quot;IP Assignment Method&quot;.","ref":"KNXex.PID.IPAssignmentMethod.html","title":"KNXex.PID.IPAssignmentMethod","type":"module"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#assert_name/2","title":"KNXex.PID.IPAssignmentMethod.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#by_name/2","title":"KNXex.PID.IPAssignmentMethod.by_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#by_value/2","title":"KNXex.PID.IPAssignmentMethod.by_value/2","type":"function"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#macro_assert_name/2","title":"KNXex.PID.IPAssignmentMethod.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#macro_by_name/2","title":"KNXex.PID.IPAssignmentMethod.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.IPAssignmentMethod.html#macro_by_value/2","title":"KNXex.PID.IPAssignmentMethod.macro_by_value/2","type":"macro"},{"doc":"Turns the given integer into the corresponding atom.","ref":"KNXex.PID.IPAssignmentMethod.html#to_atom/1","title":"KNXex.PID.IPAssignmentMethod.to_atom/1","type":"function"},{"doc":"Turns the given atom into the correct integer value.","ref":"KNXex.PID.IPAssignmentMethod.html#to_integer/1","title":"KNXex.PID.IPAssignmentMethod.to_integer/1","type":"function"},{"doc":"The KNX device's IP assignment method.","ref":"KNXex.PID.IPAssignmentMethod.html#t:method/0","title":"KNXex.PID.IPAssignmentMethod.method/0","type":"type"},{"doc":"KNXnet/IP Parameter Object &quot;KNXnet/IP Routing Capabilities&quot;.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html","title":"KNXex.PID.KNXnetRoutingCapabilities","type":"module"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#assert_name/2","title":"KNXex.PID.KNXnetRoutingCapabilities.assert_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#by_name/2","title":"KNXex.PID.KNXnetRoutingCapabilities.by_name/2","type":"function"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#by_value/2","title":"KNXex.PID.KNXnetRoutingCapabilities.by_value/2","type":"function"},{"doc":"Checks if the given routing capabilities has the group address mapping capability bit set.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#has_group_address_mapping/1","title":"KNXex.PID.KNXnetRoutingCapabilities.has_group_address_mapping/1","type":"macro"},{"doc":"Checks if the given routing capabilities has the multiple KNX installations capability bit set.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#has_multiple_knx_installations/1","title":"KNXex.PID.KNXnetRoutingCapabilities.has_multiple_knx_installations/1","type":"macro"},{"doc":"Checks if the given routing capabilities has the priority/FIFO capability bit set.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#has_priority_fifo/1","title":"KNXex.PID.KNXnetRoutingCapabilities.has_priority_fifo/1","type":"macro"},{"doc":"Checks if the given routing capabilities has the statistics queue overflow capability bit set.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#has_stats_queue_overflow/1","title":"KNXex.PID.KNXnetRoutingCapabilities.has_stats_queue_overflow/1","type":"macro"},{"doc":"Checks if the given routing capabilities has the statistics transmitted telegrams capability bit set.","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#has_stats_transmitted_telegrams/1","title":"KNXex.PID.KNXnetRoutingCapabilities.has_stats_transmitted_telegrams/1","type":"macro"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#macro_assert_name/2","title":"KNXex.PID.KNXnetRoutingCapabilities.macro_assert_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#macro_by_name/2","title":"KNXex.PID.KNXnetRoutingCapabilities.macro_by_name/2","type":"macro"},{"doc":"","ref":"KNXex.PID.KNXnetRoutingCapabilities.html#macro_by_value/2","title":"KNXex.PID.KNXnetRoutingCapabilities.macro_by_value/2","type":"macro"},{"doc":"KNX project file parser (ETS .knxproj).","ref":"KNXex.ProjectParser.html","title":"KNXex.ProjectParser","type":"module"},{"doc":"Parses a KNX project file (ETS .knxproj), extracting project information and returns a KNXex.EtsProject struct. The following informations get extracted: Project Information (name, comment, project number, project start/end, etc.) Group Addresses with the DPT Topology (Area, Line, Device, Unassigned Devices) Device Additional Attributes (i.e. IP config, if enabled) Device Communication Objects (if enabled) Device Parameters (if enabled) The following options are available: only: [atom()] - Only the specified information groups will be parsed, the following groups are available: project_info , group_addresses , topology . exclude: [atom()] - The specified information groups will be excluded (see only ), only and exclude are mutually exclusive. include_dev_add_attributes: boolean() - Include additional attributes from the device (default: false ). include_dev_com_objects: boolean() - Include communication objects from the device (default: false ). include_dev_parameters: boolean() - Include parameters from the device (default: false ). group_addresses_key: :id | :address - The key to use for the group addresses map (default: :address ). This function will raise on errors.","ref":"KNXex.ProjectParser.html#parse/2","title":"KNXex.ProjectParser.parse/2","type":"function"},{"doc":"Parses a KNX project file (ETS .knxproj), extracting manufacturer information and returns a map. The following informations get extracted: Application Programs (basic information and communication objects) Hardware &amp; products (basic information) Hardware-to-Program mappings The following options are available: only: [String.t()] - Only the specified manufacturers will be parsed, the manufacturer ID, i.e. M-0001 , is required. exclude: [String.t()] - The specified manufacturers will be excluded (see only ), only and exclude are mutually exclusive. parallel: boolean() - Whether to parse the manufacturers in parallel using Task.async_stream/5 (defaults to false ). parallel_timeout: pos_integer() - The timeout for parallel parsing (defaults to 60_000 ms). This function will raise on errors. Example output: %{ &quot;M-00C9&quot; =&gt; %{ application_programs : %{ &quot;M-00C9_A-FF14-20-223D&quot; =&gt; % KNXex.EtsProject.Manufacturer.ApplicationProgram { app_number : &quot;65300&quot; , app_version : &quot;32&quot; , com_objects : %{ &quot;O-12&quot; =&gt; % KNXex.EtsProject.Topology.Device.ComObject { communication_flag : true , description : nil , dpt : nil , function_text : &quot;Eingang&quot; , id : &quot;O-12&quot; , links : nil , number : 12 , object_size : 1 , priority : nil , read_flag : false , read_on_init_flag : false , text : &quot;Temp. Grenzwert 1: Schaltausgang Sperre&quot; , transmit_flag : false , update_flag : false , write_flag : true } } , description : &quot;KNX TH-UP&quot; , dynamic_table_management : true , hash : &quot;Iss9qvKKsV5qnWizDXWVPQ==&quot; , id : &quot;M-00C9_A-FF14-20-223D&quot; , linkable : false , mask_version : &quot;MV-0701&quot; , name : &quot;KNX App_20&quot; , program_type : &quot;ApplicationProgram&quot; } } , hardware : %{ &quot;M-00C9_H-70121-1&quot; =&gt; % KNXex.EtsProject.Manufacturer.Hardware { bus_current : 10 , hardware2programs : %{ &quot;M-00C9_H-70121-1_HP-FF14-20-223D&quot; =&gt; % KNXex.EtsProject.Manufacturer.Hardware.Hardware2Program { application_program_refid : &quot;M-00C9_A-FF14-20-223D&quot; , hash : &quot;SdI1o0jhKfnXwWt3Gf3qOvC/z4U=&quot; , id : &quot;M-00C9_H-70121-1_HP-FF14-20-223D&quot; , medium_types : [ :tp ] } } , has_application_program : true , has_individual_address : true , id : &quot;M-00C9_H-70121-1&quot; , is_coupler : nil , is_ip_enabled : nil , is_power_supply : nil , name : &quot;KNX T-AP&quot; , products : %{ &quot;M-00C9_H-70121-1_P-70121&quot; =&gt; % KNXex.EtsProject.Manufacturer.Hardware.Product { hash : &quot;H1+DOySrz+UUcxCBvF0s8MIyIak=&quot; , id : &quot;M-00C9_H-70121-1_P-70121&quot; , is_rail_mounted : false , order_number : &quot;70121&quot; , text : &quot;KNX T-AP&quot; , width : nil } } , serialnum : &quot;70121&quot; , version : &quot;1&quot; } } } }","ref":"KNXex.ProjectParser.html#parse_manufacturers/2","title":"KNXex.ProjectParser.parse_manufacturers/2","type":"function"},{"doc":"KNX Transport Layer Protocol Control Information (TPCI). See also https://support.knx.org/hc/en-us/articles/115003188529-Payload .","ref":"KNXex.TPCI.html","title":"KNXex.TPCI","type":"module"},{"doc":"Creates a new TPCI struct from the raw TPCI value.","ref":"KNXex.TPCI.html#make/1","title":"KNXex.TPCI.make/1","type":"function"},{"doc":"Calculates the integer value for the given TPCI struct.","ref":"KNXex.TPCI.html#to_integer/1","title":"KNXex.TPCI.to_integer/1","type":"function"},{"doc":"Defines what type of packet it is.","ref":"KNXex.TPCI.html#t:control_data/0","title":"KNXex.TPCI.control_data/0","type":"type"},{"doc":"Represents the TPCI.","ref":"KNXex.TPCI.html#t:t/0","title":"KNXex.TPCI.t/0","type":"type"},{"doc":"Defines the purpose of the packet and whether it contains a sequence number.","ref":"KNXex.TPCI.html#t:type/0","title":"KNXex.TPCI.type/0","type":"type"},{"doc":"KNX telegram.","ref":"KNXex.Telegram.html","title":"KNXex.Telegram","type":"module"},{"doc":"Represents a KNX telegram.","ref":"KNXex.Telegram.html#t:t/0","title":"KNXex.Telegram.t/0","type":"type"},{"doc":"KNXnet/IP Tunnel Client, which wraps around the KNXnetIP.Tunnel behaviour module. The KNX Tunnel Client connects to a KNXnet/IP server (gateway or router) using a tunnelling connection, to send and receive KNX telegrams. Processes interested in receiving received KNX telegram need to subscribe to them, using subscribe/1 and unsubscribe/1 to unsubscribe from them. Each function takes an opts keyword list, which can have an optional :name option, which is then used to call the TunnelClient identified by the :name (a PID or registered name), and an optional :timeout option (defaults to 5000).","ref":"KNXex.TunnelClient.html","title":"KNXex.TunnelClient","type":"module"},{"doc":"Adds the given group address with the datapoint type (DPT) to the group address list. Unknown group addresses can not be used to send or receive telegrams. The DPT is in the form of &quot;x.yyy&quot; where x and y are numbers, i.e. 1.001 .","ref":"KNXex.TunnelClient.html#add_group_address/3","title":"KNXex.TunnelClient.add_group_address/3","type":"function"},{"doc":"Disconnects from the KNX/IP gateway/router and closes the KNXnet Tunnel server.","ref":"KNXex.TunnelClient.html#close/1","title":"KNXex.TunnelClient.close/1","type":"function"},{"doc":"Gets all group addresses from the state.","ref":"KNXex.TunnelClient.html#get_group_addresses/1","title":"KNXex.TunnelClient.get_group_addresses/1","type":"function"},{"doc":"Sends a GroupValueRead to group_address . Waits up to timeout for the response. Utilizes a Task to subscribe temporarily to events.","ref":"KNXex.TunnelClient.html#read_group_address/2","title":"KNXex.TunnelClient.read_group_address/2","type":"function"},{"doc":"Removes the given group address from the group address list.","ref":"KNXex.TunnelClient.html#remove_group_address/2","title":"KNXex.TunnelClient.remove_group_address/2","type":"function"},{"doc":"Sends a raw telegram. The returned reference is currently without any meaning to the user.","ref":"KNXex.TunnelClient.html#send_raw_telegram/2","title":"KNXex.TunnelClient.send_raw_telegram/2","type":"function"},{"doc":"Sends a telegram. The DPT of the group_address must be known. The returned reference is currently without any meaning to the user.","ref":"KNXex.TunnelClient.html#send_telegram/2","title":"KNXex.TunnelClient.send_telegram/2","type":"function"},{"doc":"Starts the KNXnet/IP Tunnel Client. The following options are available (some are required): allow_unknown_gpa: boolean() - Optional. Determines whether unknown Group Addresses are allowed (not ignored when received, defaults to false ). This will also mean that you receive the raw undecoded value and you need to provide the raw encoded value when sending. group_addresses: map() - Required. Group addresses map, where the key is the group address in x/y/z notation and the value is the DPT (datapoint type) - both being String.t() . The group address and its DPT is required to determine how to encode and decode received values. local_ip: :inet.ip4_address() - Optional. The local IP address to use. If nil, the local IP address will be discovered. server_ip: :inet.ip4_address() - Required. The KNX/IP gateway/router IP address to connect to. All other given options are passed to the Tunnel behaviour module (i.e. :name can be given to override the process name to register).","ref":"KNXex.TunnelClient.html#start_link/1","title":"KNXex.TunnelClient.start_link/1","type":"function"},{"doc":"Subscribes to telegram notifications. The subscriber will receive messages in the form {:knx, KNXex.Telegram.t()} .","ref":"KNXex.TunnelClient.html#subscribe/2","title":"KNXex.TunnelClient.subscribe/2","type":"function"},{"doc":"Unsubscribes from telegram notifications.","ref":"KNXex.TunnelClient.html#unsubscribe/2","title":"KNXex.TunnelClient.unsubscribe/2","type":"function"},{"doc":"Encodes value according to the DPT of the group_address , and sends it in a GroupValueWrite to group_address .","ref":"KNXex.TunnelClient.html#write_group_address/3","title":"KNXex.TunnelClient.write_group_address/3","type":"function"},{"doc":"Reads the given KNX ETS project and generates a map of all group addresses to their Datapoint Type (DPT). This map can be used for the KNX Multicast Client and KNX Tunnel Client. Group addresses that do not specify a DPT are ignored. The first argument must be given to specify the path to the ETS project. The second argument can be given to specify the path where to store the map (in Inspect format). If no target is given, the map is printed to stdout. Info output is only generated when map is written to file, and not to stdout.","ref":"Mix.Tasks.KNX.Gen.GrpaddrMap.html","title":"Mix.Tasks.KNX.Gen.GrpaddrMap","type":"task"},{"doc":"Callback implementation for Mix.Task.run/1 .","ref":"Mix.Tasks.KNX.Gen.GrpaddrMap.html#run/1","title":"Mix.Tasks.KNX.Gen.GrpaddrMap.run/1","type":"function"}]